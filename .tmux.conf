set -g default-shell /bin/sh

%if "$TMUX_CONF" TMUX_CONF="$TMUX_CONF" %else TMUX_CONF="$HOME/.tmux.conf" %endif
%if "$TMUX_CONF_LOCAL" TMUX_CONF_LOCAL="$TMUX_CONF_LOCAL" %else TMUX_CONF_LOCAL="$HOME/.tmux.conf.local" %endif

if "command -v fish >/dev/null" {
    set -g default-command 'fish -C "function conf; sed \"0,/^#===\$argv[1]/d;/^#===/Q;s/^###//\" \"'"$TMUX_CONF"'\"; end; conf fish | source"'
} {
    set -g default-command 'd=$(mktemp -d /tmp/tmux-temp-conf-XXXXXX); sed "0,/^#===inputrc/d;/^#===/Q;s/^###//" '"$TMUX_CONF"' > "$d/1"; sed "0,/^#===bash/d;/^#===/Q;s/^###//" '"$TMUX_CONF"' > "$d/2"; INPUTRC="$d/1"; bash --init-file "$d/2"; rm "$d/1" "$d/2"; rmdir "$d"'
}

set -g escape-time 0
set -g mouse       on

set -g status-position    top
set -g status-left        '[#S] '
set -g status-left-length 4
set -g status-right       '#{s#^'$HOME'#~#;s#/\$##;s#([-._]*[^/])[^/]*/#\1/#g:pane_current_path} [#{s/^(..)...*(..)$/\1.\2/:user}@#{s/^(..)...*(..)$/\1.\2/:host}]'

bind    '"' split-window -vc "#{pane_current_path}"
bind    s   split-window -vc "#{pane_current_path}"
bind    %   split-window -hc "#{pane_current_path}"
bind    v   split-window -hc "#{pane_current_path}"
bind    w   new-window   -c  "#{pane_current_path}"
bind    r   source "$TMUX_CONF" \; display "Reloaded .tmux.conf"
bind -r o   select-pane -t :.+
bind -n F3  next-window
bind -n F4  select-pane -t :.+

if-shell "test -f '$HOME/.tmux.conf.local'" "source-file '$HOME/.tmux.conf.local'" ""

%if ''
#===fish
set -x PATH $PATH:/data/data/com.termux/files/home/bin/
function fish_greeting; end
function nv; nvim -u (conf vim | psub) $argv; end
set _vimpath (command -v vim)
if [ -n $_vimpath ]; function vim; $_vimpath -u (conf vim | psub) $argv; end; end
alias ra ranger

#===vim
" vim "
set nocp sm hid
syntax on | filetype on | filetype plugin indent on
###set ls=2 stl=%<[%{&readonly?'R':''}%{&modified?'+':'-'}]\ \ %f%*%=%-10.(%l,%c%V%)\ %y%6.(%P%)
" neovim "
set et ai sw=4 ts=4 sr mouse=av so=1 siso=5 tw=0 nu sb spr cf acd wic ic scs is hls ttm=0 t_Co=16
nn Q :q<cr> | ino <s-f13> <nop> | ino <c-f14> <nop> | nn j gj | nn k gk | nn J <c-d> | nn K <c-u> | nn D dd | nn Y yy
exe "au InsertEnter * set cul" | exe "au InsertLeave * set nocul"

#===inputrc
TAB:    menu-complete
"\e[Z": menu-complete-backward
"\C-w": shell-backward-kill-word
"\e[A": history-search-backward
"\e[B": history-search-forward
set show-all-if-ambiguous on        # Tab -> partial completion and show candidates
set colored-stats On                # Color files by types
set visible-stats On                # Append char to indicate type
set mark-symlinked-directories On   # Mark symlinked directories
set colored-completion-prefix On    # Color the common prefix
set menu-complete-display-prefix On # Color the common prefix in menu-complete
set echo-control-characters off     # Don't show ^C etc.
set enable-bracketed-paste off      # Workaround (https://github.com/hanslub42/rlwrap/issues/108)

#===bash
conf() { sed "0,/^#===$1/d;/^#===/Q;s/^###//" "$TMUX_CONF"; }
_vimpath=$(command -v vim)
if [ -n "$_vimpath" ]; then vim() { "$_vimpath" -u <(conf vim) "$@"; }; fi
_nvimpath=$(command -v nvim)
if [ -n "$_nvimpath" ]; then nv() { "$_nvimpath" -u <(conf vim) "$@"; }; fi
_exitstatus() { local s=$?; [[ $s == 0 ]] && echo "" || echo -e "\e[31m$s\e[0m "; }
_CYAN="\[\e[36m\]"; _RESET="\[$(tput sgr0)\]"
###export PS1="$_CYAN\w$_RESET \$(_exitstatus)>>> "

#===
%endif

if-shell "test -f $TMUX_CONF_LOCAL" "source $TMUX_CONF_LOCAL"
