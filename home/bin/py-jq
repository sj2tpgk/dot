#!/usr/bin/env python3

# Simple version of jq and gron

import argparse, json, re, sys

def tolist(x):
    if type(x) is dict: return list(x.values())
    elif type(x) is list: return x
    else: raise Exception("err")

def resolve(lis, query):
    # lis = list(lis); print(lis, query) # generators can be consumed at most once
    rkey = r"[^][.]+"
    rnum = r"[0-9]+"
    if query == "." or query == "":
        return list(lis)
    elif m := re.match(rf"\.({rkey})", query):
        return resolve((x[m[1]] for x in lis), query[m.end():])
    elif m := re.match(rf"\.?\[\]", query):
        return resolve(sum((tolist(x) for x in lis), []), query[m.end():])
    elif m := re.match(rf"\.?\[({rnum})\]", query):
        return resolve((x[int(m[1])] for x in lis), query[m.end():])

def gron(jso, compact, raw):
    result = []
    def push(left, right): result.append(f"{left}={right}" if compact else f"{left} = {right};")
    def gron(jso, prefix="json"):
        if type(jso) is dict:
            push(prefix, "{}")
            for k, v in jso.items(): gron(v, f"{prefix}.{k}")
        elif type(jso) is list:
            push(prefix, "[]")
            for i, v in enumerate(jso): gron(v, f"{prefix}[{i}]")
        else:
            push(prefix, jso if raw else json.dumps(jso, separators=(',', ':')))
    gron(jso)
    return result

def _test():
    jso = { "a": { "a1": 10 }, "b": [ 20, "21", 22, "23" ], "c": { "c1": [31, 32], "c2": [33, 34] } }
    def t(i, x, y): print(i, x==y, x, "" if x==y else y)
    t(1, resolve([jso], "."),        [jso])
    t(2, resolve([jso], ".a"),       [jso["a"]])
    t(3, resolve([jso], ".b"),       [jso["b"]])
    t(4, resolve([jso], ".[]"),      list(jso.values()))
    t(5, resolve([jso], ".b[]"),     jso["b"])
    t(6, resolve([jso], ".c.c2[1]"), [jso["c"]["c2"][1]])
    t(7, resolve([jso], ".c[][1]"),  [x[1] for x in jso["c"].values()])
    t(31, gron(jso, False, False), [ 'json = {};', 'json.a = {};', 'json.a.a1 = 10;', 'json.b = [];', 'json.b[0] = 20;', 'json.b[1] = "21";', 'json.b[2] = 22;', 'json.b[3] = "23";', 'json.c = {};', 'json.c.c1 = [];', 'json.c.c1[0] = 31;', 'json.c.c1[1] = 32;', 'json.c.c2 = [];', 'json.c.c2[0] = 33;', 'json.c.c2[1] = 34;' ])
    t(32, gron(jso, True, False), [ 'json={}', 'json.a={}', 'json.a.a1=10', 'json.b=[]', 'json.b[0]=20', 'json.b[1]="21"', 'json.b[2]=22', 'json.b[3]="23"', 'json.c={}', 'json.c.c1=[]', 'json.c.c1[0]=31', 'json.c.c1[1]=32', 'json.c.c2=[]', 'json.c.c2[0]=33', 'json.c.c2[1]=34' ])
    t(33, gron(jso, True, True), [ 'json={}', 'json.a={}', 'json.a.a1=10', 'json.b=[]', 'json.b[0]=20', 'json.b[1]=21', 'json.b[2]=22', 'json.b[3]=23', 'json.c={}', 'json.c.c1=[]', 'json.c.c1[0]=31', 'json.c.c1[1]=32', 'json.c.c2=[]', 'json.c.c2[0]=33', 'json.c.c2[1]=34' ])

if __name__ == "__main__":
    ap = argparse.ArgumentParser(description="Simple version of jq and gron")
    ap.add_argument("-c", "--compact", action="store_true")
    ap.add_argument("-g", "--gron",    action="store_true")
    ap.add_argument("-r", "--raw",     action="store_true")
    ap.add_argument("--test",          action="store_true")
    ap.add_argument("query", nargs="?")
    args = ap.parse_args()
    if args.test:
        _test()
    elif args.gron:
        lis = gron(json.load(sys.stdin), args.compact, args.raw)
        for x in lis:
            print(x)
    else:
        if not args.query:
            ap.print_help()
            print("ERROR: Query required", file=sys.stderr)
            exit(1)
        lis = resolve([json.load(sys.stdin)], args.query)
        for jso in lis:
            if args.raw and type(jso) is str:
                print(jso)
            elif args.compact:
                print(json.dumps(jso, separators=(',', ':')))
            else:
                print(json.dumps(jso, indent=2))
