#!/bin/sh

# call ollama api and streams response

for cmd in curl jq stdbuf; do
    command -v "$cmd" >/dev/null || { echo "Command $cmd is not available" >&2; exit 1; }
done

[ "$#" -eq 0 ] && {
    echo >&2 "Usage: oll HOST:PORT MODEL PROMPT ..."
    echo >&2 "       oll HOST:PORT list"
    echo >&2 "       oll reset"
    exit 1
}

tmpdir=$(mktemp -d -u)
tmpdir=${tmpdir%/*}/oll
mkdir -p "$tmpdir"

if [ "$1" = reset ]; then
    rm -f "$tmpdir/context"
    exit
fi

if [ "$2" = list ]; then
    curl -s "$1"/api/tags | jq -r .models[].model
    exit
fi

addr="$1"
model="$2"
shift 2
prompt="$*"
prompt_withquote=$(printf %s "$prompt"|jq -Rs .)

context=null
if [ -e "$tmpdir/context" ]; then
    read -r context < "$tmpdir/context"
    if ! echo "$context" | grep -qE '^\[[0-9]+(,[0-9]+)*\]$'; then context=null; fi
    # context is like [123,45678,...,333,44444] or null
fi

json="{
    \"model\"      : \"$model\",
    \"prompt\"     : $prompt_withquote,
    \"keep_alive\" : \"99999m\",
    \"think\"      : false,
    \"context\"    : $context
}"
# \"options\" : { \"num_ctx\" : 65536 },

printf "%s\n" "$json" > "$tmpdir/request"

stdbuf -o0 \
    curl -s "http://$addr/api/generate" -d "@$tmpdir/request" \
    | jq -j --unbuffered 'if .context then .context|stderr|empty else .response end' \
    2>"$tmpdir/context" | tee "$tmpdir/response"

# rm "$tmpdir/request" "$tmpdir/response"
