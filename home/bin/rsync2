#!/bin/bash

set -euo pipefail

die() { help >&2; echo >&2; echo "ERROR: $*" >&2; exit 1; }
echoB() { echo -ne "\033[1m"; echo "$@"; echo -ne "\033[0m"; }

help() {
    echo "Usage: $0 FROM TO [RSYNC OPTIONS ...]"
    echo "Note: Invoked by moving to FROM and rsync . TO"
    echo
    echo "* Exclude pattern are interpreted relative to FROM dir"
    echo "  - trailing slash   = match directories only"
    echo "  - leading slash    = path relative to FROM dir"
    echo "  - no leading slash = match any path component (not substring match)"
    echo
    echo "Examples:"
    echo
    echo "1. Use --link-dest (incremental backup)"
    echo "   rsync2 /path/to/mydir/ /dest/mydir/20230501 --link-dest=/dest/mydir/20230401 -i"
    echo
    echo "2. Remote dir (rsync:// or -e ssh)"
    echo "   rsync2 rsync://server/myentry/ /dest/mydir/0501 --link-dest=/dest/mydir/0401 -i"
    echo "   rsync2 user@server:/path/to/mydir/ /dest/mydir/0501 --link-dest=/dest/mydir/0401 -i -e ssh"
}

from=
to=
# shellcheck disable=SC2054
opts=(
    -aP # --archive --partial
    -H # --hard-links (hard linked two files in source will not be duplicated in the destination)
    # -AX # --progress --acls --xattrs
    --info=stats2,progress2 -h # --human-readable
    --log-file="$(pwd)/rsync-$(date +"%Y%m%d-%H%M%S").log"
    --mkpath # link mkdir -p for TO
    --exclude=/.Android/
    --exclude=/.cache/
    --exclude=/.cargo/
    --exclude=/.cpan/
    --exclude=/.go/
    --exclude=/.ipfs/
    --exclude=/.local/share/uv/
    --exclude=/.npm/
    --exclude=.gradle/
    --exclude=.mypy_cache/
    --exclude=.venv/
    --exclude=node_modules/
)

# Parse args
[ $# -ge 2 ] || die "Not enough arguments"
from=$1
to=$2
use_ssh=
shift 2
while [[ $# -ge 1 ]]; do
    if [[ "$1" = -e || "$1" = --rsh ]] && [[ $2 =~ ^ssh ]]; then
        use_ssh=1
    fi
    case "$1" in
        (*) opts+=("$1"); shift ;;
    esac
done

is_remote() {
    [[ $use_ssh && $1 =~ ^[-a-zA-Z0-9_]+@[-a-zA-Z0-9_]+: ]] || [[ $1 =~ ^rsync:// ]]
}

# Normalize and check "from" path
[[ "${from%/}" != "$from" ]] || die "$from does not end with /"
if ! is_remote "$from"; then
    from=$(cd "$from" && pwd)/ # Slash is necessary
    [[ -d "$from" ]] || die "$from is not a directory"
fi

# Normalize and check "to" path
if ! is_remote "$to"; then
    if ! [[ -d "$to" ]]; then
        mkdir -p "$to" || die "could not create directory $to"
    fi
    to=$(cd "$to" && pwd)/ # Slash is not necessary
    [[ -d "$to" ]] || die "could not create directory $to"
fi

# Cd to FROM dir
echoB "Cloning:"
echo  "  $from"
echo  "  as"
echo  "  $to"
echo

# Construct rsync command
cmd=(
    rsync
    "${opts[@]}"
    "$from" "$to"
)

# Show command
echoB "Command:"
for i in "${cmd[@]}"; do
    printf "  %q\n" "$i"
done

# Run command
echo
echoB -n "Run this command? [y/n] "; read -r ans
[[ "$ans" == y ]] || die "cancelled by user"
# echo "${cmd[*]}"
"${cmd[@]}"
