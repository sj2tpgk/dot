#!/bin/awk -f

# First argument must be "--"

# Performance note:
#    cmd | getline x    -- slow
#    system(cmd)        -- slow
#    getline x < file   -- fast
#    ENVIRON["var"]     -- fast
# 1. Use external cmd as few times as possible.
#    Try to combine multiple cmds.
# 2. Try using ENVIRON and only when it does not gives the info, call external cmd.

function print_help() {
    print "Usage: myprompt -- [options ...]"
    print "Options:"
    print "  --shell SHELL     Set shell name           (default: $SHELL)"
    print "  --last-status N   Last command exit code   (default: 0)"
    print "  --last-signal N   Last command kill signal (default: 0)"
    print "  --tmux            Use tmux formatting"
    print "  --short           Only print user@host"
    print "  --help            Help"
}

BEGIN {

    # Parse arguments
    argi = 1
    SHELL = ENVIRON["SHELL"]
    while (argi < ARGC) {
        arg = ARGV[argi++]
        # printf "arg[%d] = [%s]\n", argi-1, arg
        if      (arg == "--shell")               { SHELL      = ARGV[argi++] }
        else if (arg == "--last-status")         { LASTSTATUS = ARGV[argi++] }
        else if (arg == "--last-signal")         { LASTSIGNAL = ARGV[argi++] }
        else if (arg == "--tmux")                { TMUX       = 1            }
        else if (arg == "--short")               { SHORT      = 1            }
        else if (arg == "--help" || arg == "-h") { print_help(); exit        }
        else { printf "Invalid argument: %s\n", arg; print_help(); exit }
    }

    # Color table
    if (TMUX) {
        C[0] = C["k"] = "#[fg=black]"; C[1] = C["r"] = "#[fg=red]"
        C[2] = C["g"] = "#[fg=green]"; C[3] = C["y"] = "#[fg=yellow]"
        C[4] = C["b"] = "#[fg=blue]";  C[5] = C["m"] = "#[fg=magenta]"
        C[6] = C["c"] = "#[fg=cyan]";  C[7] = C["w"] = "#[fg=white]"
        C["bold"] = "#[bold]"; C["none"] = "#[default]"
    } else {
        C[0] = C["k"] = "\033[30m"; C[1] = C["r"] = "\033[31m"
        C[2] = C["g"] = "\033[32m"; C[3] = C["y"] = "\033[33m"
        C[4] = C["b"] = "\033[34m"; C[5] = C["m"] = "\033[35m"
        C[6] = C["c"] = "\033[36m"; C[7] = C["w"] = "\033[37m"
        C["bold"] = "\033[1m"; C["none"] = "\033[0m"
    }

    # Only print user@host and exit
    if (SHORT) {
        printf "%s%s", get_uandh(), C["none"]
        exit
    }

    # Components
    uandh = get_uandh()
    dir   = get_dir()
    git   = get_git()
    codes = get_codes()
    arrow = get_arrow()

    # Write output
    output = uandh C["none"] " " C["m"] (git ? git " " : "") C["g"] dir " " C["r"] (codes ? codes " " : "") C["bold"] arrow " " C["none"]
    printf "%s", output # no newline

    # Must explicitly exit, otherwise awk waits stdin
    exit

}

function get_uandh(    user, host, cu, ch) {
    user = ENVIRON["USER"]

    # ENVIRON["hostname"], ENVIRON["HOSTNAME"], ENVIRON["HOST"] are not passed to awk from shell? (fish has $hostname, bash $HOSTNAME, zsh $HOST but none of them are passed. sh and elvish has neither of them)
    getline host < "/etc/hostname"
    if (!host) { "uname -n" | getline host }

    cu = C[hash(user, 7, 6) + 1]
    ch = C[hash(host, 7, 0) + 1]

    # abbreviate if too long
    if (length(user) >= 6)
        user = substr(user, 1, 2) "." substr(user, (length(user) - 1))
    if (length(host) >= 6)
        host = substr(host, 1, 2) "." substr(host, (length(host) - 1))

    # colorize (using hash) and return
    return cu user C["c"] "@" ch host
}

function get_dir(    pwd, i, a, n) {

    # get pwd
    pwd = ENVIRON["PWD"]
    if (!pwd) { "pwd" | getline pwd }

    # $HOME to ~
    if ((i = index(pwd, ENVIRON["HOME"])) == 1)
        pwd = "~" substr(pwd, length(ENVIRON["HOME"]) + 1)

    # remove trailing / (buf not if pwd is the root dir)
    if (substr(pwd, length(pwd)) == "/" && length(pwd) > 2)
        pwd = substr(pwd, 1, length(pwd) - 1)

    # keep only first char of each path component except the last one
    n = split(pwd, a, "/")
    for (i=1; i<n; i++)
        a[i] = substr(a[i], 1, match(a[i], "[^-._\\[\\]]"))

    # join path components
    pwd = a[1]
    for (i=2; i<=n; i++)
        pwd = pwd "/" a[i]
    return pwd

}

function get_git(    cmd, out, out2) {
    # checking "command -v git" and "git rev-parse --is-inside-work-tree" does not really increase performance
    cmd = "git rev-parse --abbrev-ref HEAD 2>/dev/null && git status -s 2>/dev/null"
    cmd | getline out
    if (out) {
        if (1 == (cmd | getline out2))
            out = out "+"
        return "(" out ")"
    }
}

function get_codes(    cmd, killsig) {
    if (LASTSTATUS != 0) {
        if (LASTSIGNAL != 0) {
            cmd = "kill -l " LASTSIGNAL
            cmd | getline killsig
            # For some reason, following does not work.
            #    "kill -l " LASTSIGNAL | getline killsig
            # It shows "/bin/sh: 1: 2: not found" when LASTSIGNAL is 2.
            killsig = "|SIG" killsig
        }
        return "[" LASTSTATUS killsig "]"
    }
}

function get_arrow() {
    if (0 != index(SHELL, "fish_private"))
        return C["m"] ">>>"
    if (0 != index(SHELL, "fish"))
        return C["r"] ">" C["y"] ">" (ENVIRON["RANGER_LEVEL"] ? C["g"] : C["b"]) ">"
    if (0 != index(SHELL, "elvish"))
        return C["g"] ">>" C["w"] ">"
    if (0 != index(SHELL, "bash"))
        return C["y"] ">>" C["r"] ">"
    return C["w"] ">>>"
}

function hash(s, n, seed,    i) {
    for (i=1; i<=length(s); i++)
        seed += ord(substr(s, i, 1))
    return seed % n
}

function ord(c,    i) {
    # perl ord() for printable ascii chars
    if (0 != (i = index(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", c))) {
        return i + 31
    }
    return 0
}
