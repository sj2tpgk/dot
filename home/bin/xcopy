#!/bin/sh

text=$*

wsl_copy() {
    # win32yank -i; return
    cd /

    magic=ac7i6ma0
    tmpdir=/tmp/wslclip
    [ ! -d "$tmpdir" ] && mkdir -p "$tmpdir"
    pidfile="$tmpdir/copy_pid"
    inputfile="$tmpdir/copy_input"
    oninitfile="$tmpdir/copy_oninit"
    logfile="$tmpdir/copy_log"
    log() { printf "%s (sh) %s\n" "$(date +'%Y/%m/%d %H:%M:%S.%3N')" "$*" >> "$logfile"; }
    printf "%s\n" "------" >> "$logfile"

    # if "pidfile cannot be read" or "pid written in pidfile no longer exists", start new daemon
    if ! read -r pid < "$pidfile" 2>/dev/null || [ ! -e "/proc/$pid/fd/0" ]; then
        log "pid=[$pid], $([ -z "$pid" ] && printf "%s" "read $pidfile failed"), $([ -n "$pid" ] && [ ! -e "/proc/$pid/fd/0" ] && printf "%s" "/proc/$pid/fd/0 does not exist")"

        # shellcheck disable=SC2016
        pwsh='
        # '$magic' wsl-xcopy-pwsh # For pgrep purpose
        $wslroot="//wsl$/'"$WSL_DISTRO_NAME"'"
        echo a > "$wslroot/'"$oninitfile"'"
        function log{ param($msg); $d=$(get-date -Format "yyyy/MM/dd HH:mm:ss.fff"); echo "$d (PS) $msg" >> "$wslroot/'"$logfile"'"}
        log init
        while(1){
            $got = Read-Host
            log "read-host done"

            # Assumes base64 encoded UTF-8 data is in $inputfile
            #$b64 = Get-Content "$wslroot/'"$inputfile"'"
            #$bin = [System.Convert]::FromBase64String($b64)
            #$str = [System.Text.Encoding]::UTF8.GetString($bin)
            #Set-Clipboard $str
            # echo "b64=$b64,str=$str"

            $str = (Get-Content -Raw -Encoding utf8 "$wslroot/'"$inputfile"'")
            log "get-content done, str is [$str]"
            Set-Clipboard $str
            log "set-clipboard done"

        }
        '

        mkdir -p "$tmpdir"
        touch "$inputfile"
        rm "$oninitfile" 2>/dev/null

        # Run powershell and save pid
        # This reads $inputfile and save it to clipboard whenever something is written in stdin.
        # An alternative is clip.exe, but has encoding problem, not works on some directories, slower than this background-powershell method etc.
        # A dummy process is piped to powershell.exe, otherwise we cannot write to its stdin with /proc/$pid/fd/0.
        # Also powershell.exe must be piped to something other than stdout, otherwise it does not persist when not launched from terminal (e.g. from vim).
        # Replacing "while ..." with "cat" works in terminal, but not in script (infinite loop)
        log "starting powershell"
        while true; do sleep 100000; done | powershell.exe "$pwsh" > /dev/null &
        pid=$!
        echo $pid > "$pidfile"
        log "PID $pid is written to $pidfile"

        # wait until $oninitfile is created (powershell startup is slow)
        # i=0; while [ $((i += 1)) -lt 5000 ] && [ ! -e "$oninitfile" ]; do sleep .01; done
        i=0; while [ $((i += 1)) -lt 5000 ] && [ ! -e "$oninitfile" ]; do sleep 0; done
        log "$oninitfile created."

    fi

    # { [ -z "$text" ] && cat || printf "%s" "$text"; } | base64 > "$inputfile"
    # echo > "/proc/$pid/fd/0"
    log "writing to $inputfile"
    { [ -z "$text" ] && cat || printf "%s" "$text"; } > "$inputfile"
    log "writing to /proc/$pid/fd/0"
    echo > "/proc/$pid/fd/0"

}


## Main program

if [ -n "${IS_WSL}${WSL_DISTRO_NAME}${WSL_INTEROP}${WSL_ENV}" ]; then # wsl
    wsl_copy

elif command -v xclip > /dev/null; then # xorg
    { [ -z "$text" ] && cat || printf "%s" "$text"; } \
        | xclip -selection clipboard -i

fi
