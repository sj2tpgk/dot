## Environment specific settings should be done in MY_TMUX_CONF_LOCAL

### Variables {{{
# use %hidden  or setenv -h to prevent exposing vars to child procs (not supported in older ver of tmux)
MY_TMUX_PREFIX=C-b
MY_TMUX_PREFIX2=M-8
MY_TMUX_CONF="$HOME/.tmux.conf"
MY_TMUX_CONF_LOCAL="$HOME/.tmux.conf.local"
run-shell 'tmux setenv -g MY_TMUX_SHELL "$(command -v fish || command -v elvish || command -v zsh || command -v bash || command -v sh || echo /bin/sh)"'
## }}}

### Key bindings {{{
## Session
bind    c-s   choose-session
bind    S     choose-session
## Window
bind    c-w   choose-window
bind    W     choose-window
bind    b     next-window
bind    n     next-window
bind -n F3    next-window
bind    d     previous-window
bind    N     previous-window
bind -n m-F3  previous-window
bind    w     new-window -c "#{pane_current_path}"
## Pane
bind    a     select-pane -t :.+
bind    s     split-window -vc "#{pane_current_path}"
bind    '"'   split-window -vc "#{pane_current_path}"
bind    v     split-window -hc "#{pane_current_path}"
bind    %     split-window -hc "#{pane_current_path}"
bind    o     rotate-window
bind -r h     resize-pane -L 1
bind -r j     resize-pane -D 1
bind -r k     resize-pane -U 1
bind -r l     resize-pane -R 1
bind -r <     swap-pane -d -t -1
bind -r >     swap-pane -d -t +1
bind -r .     swap-pane -d -t +1
# cd to last pane's pwd (need functions in shell configs)
bind    f     send-keys "tmuxcd\r"
# completion
# bind    Tab   run-shell -b "#{HOME}/bin/tmux-comp"
# bind    Tab   run "tmux popup -E 'tmux send -l \"$(ls /bin/ | fzf) \"'"
# bind    Tab   run "tmux popup -E 'tmux send -l \"$({ ls /bin; tmux lsp -a -F \"##D\" | xargs -n1 tmux capturep -J -pt | grep -oE \"\\w{4,}\"; } | sort -u | fzf) \"'"
# complete from /bin, and words from all panes
# bind    Tab   run "\
# f(){ tmux display -pF \"##{$1}\"; };\
# px=$(f pane_left); py=$(f pane_top); cx=$(f cursor_x); cy=$(f cursor_y);\
# q=$(tmux capturep -J -p -S \$cy -E \$cy | cut -c-\"\$cx\" | grep -oE '\\w+$' || echo);\
# tmux popup -EB -e \"q=\$q\" -w 20 -h 8 -x $(expr \$px + \$cx - \"\${##q}\" - 2) -y $(expr \$py + \$cy + 1)\
#   'candidates(){ tmux lsp -a -F \"##D\" | xargs -n1 tmux capturep -J -pt | grep -oE \"\\w{4,}\" | sort -u;};\
#    s=$(candidates | fzf --no-color --info hidden --color bw --prompt \"  \" --pointer \" \" --print-query -q \"\$q\");\
#    [ \$? -eq 130 ] || { s=$(echo \"\$s\" | tail -n1); tmux send -N \"\${##s}\" BSpace 2>/dev/null \\; send -l \"\$s \"; }'"
bind    Tab   run "\
f(){ tmux display -pF \"##{$1}\"; };\
px=$(f pane_left); py=$(f pane_top); cx=$(f cursor_x); cy=$(f cursor_y);\
q=$(tmux capturep -J -p -S \$cy -E \$cy | cut -c-\"\$cx\" | grep -oE '\\w+$' || echo);\
t=$(f pane_id)
cmd='\
  candidates(){ tmux lsp -a -F \"##D\" | xargs -n1 tmux capturep -J -pt | grep -oE \"\\w{4,}\" | sort -u;};\
  s=$(candidates | fzf --no-color --info hidden --color bw --prompt \"  \" --pointer \" \" --print-query -q \"\$q\");\
  [ \$? -eq 130 ] || { s=$(echo \"\$s\" | tail -n1); tmux send -t \"\$t\" -N \"\${##s}\" BSpace 2>/dev/null \\; send -t \"\$t\" -l \"\$s \"; }';\
tmux popup0 -EB -e \"t=\$t\" -e \"q=\$q\" -w 20 -h 8 -x $(expr \$px + \$cx - \"\${##q}\" - 2) -y $(expr \$py + \$cy + 1) \"\$cmd\" || tmux splitw -e \"t=\$t\" -e \"q=\$q\" -b -l 8 \"\$cmd\""
## }}}

## Titlebar (of window manager) {{{
set -g set-titles on
set -g set-titles-string "#{pane_current_command}:#{s/#{HOME}/~/:pane_current_path}" # #T #{=5:window_name}

## }}}
## Status bar {{{
set -g status-left "#[nobold]#(myprompt -- --tmux --short | sed 's/ .*//') [#S] "
set -g status-left-length 20
# set -g status-right "#[bg=white,fg=black,bold] #(echo #{pane_current_path} | sed 's#$HOME#~#g') #[default] [#W]"
set -g status-right "#[bg=white,fg=black,bold] #{s/#{HOME}/~/:pane_current_path} #[default] [#W]"
set -g status-justify left
set -g status-position top
set -g window-status-current-style fg=yellow
set -g window-status-last-style    fg=white
set -g window-status-format         "#[fg=white,bg=black,bold] #I#F#W #[default]"
set -g window-status-current-format "#[bg=blue ,fg=black,bold] #I#F#W #[default]"
set -g status on

set -g status-style "bold,fg=white,bg=black"

set -g message-style "bold,fg=black,bg=yellow"

## }}}
## Pane border {{{
set -g pane-border-style        "fg=blue,bg=default"
set -g pane-active-border-style "fg=yellow,bg=default"

## }}}
## Prefix {{{
unbind C-b
# primary prefix
unbind $MY_TMUX_PREFIX
set -g prefix $MY_TMUX_PREFIX
bind $MY_TMUX_PREFIX send-prefix
# secondary prefix
unbind $MY_TMUX_PREFIX2
set -g prefix2 $MY_TMUX_PREFIX2
bind $MY_TMUX_PREFIX2 send-prefix -2

## }}}
## Default shell {{{
# TODO write comment about asciinema
# set -g default-shell "$MY_TMUX_SHELL"
# set -g default-command "$MY_TMUX_SHELL"
# if-shell 'command -v fish' 'set -g default-shell /usr/bin/fish'
# if-shell 'command -v fish' 'set -g default-command /usr/bin/fish'
# set -gF default-shell   "#{MY_TMUX_SHELL}"
# set -g  default-command ""
set -gF default-shell   /bin/sh
set -g  default-command "exec fish"

## }}}
## Reload .tmux.conf {{{
bind r source-file "$MY_TMUX_CONF" \; display "Reloaded $MY_TMUX_CONF"

## }}}
## Misc {{{
set -g escape-time     0     # no delay on Esc
set -g repeat-time     1000  # time threshold for "bind -r"
set -g mouse           on
set -g display-time    2200  # status msg duration
set -g base-index      1     # start window index from 1
set -g pane-base-index 1     # start pane index from 1
set -g focus-events    on
# Default terminal / enable cursor style changing. {{{
# I don't fully understand what's happening.
# Ss=xxx seems to tell tmux to convert xxx as cursor-changing command...
set -g  default-terminal   "screen-256color"
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
# Description on Ss and Se: https://invisible-island.net/xterm/terminfo.html
# Workaround1: https://www.reddit.com/r/neovim/comments/7jv6x1/tmux_issue_guicursor_permanently_modifies_cursor/
# Issue is tmux+nvim: https://github.com/neovim/neovim/issues/5096

# moved from .tmux.local.conf
set -ga terminal-overrides ",$TERM:Tc"
# }}}

## }}}
### Copy mode (and some copy/paste bindings) {{{
set -g mode-keys vi
bind c copy-mode
bind -T copy-mode-vi Escape send-keys -X cancel

## Drag in copy-mode ==> copy
bind -T copy-mode-vi mousedragend1pane send-keys y
bind -T copy-mode-vi mousedragend3Pane send-keys y

## Press y ==> copy selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "command -v xcopy >/dev/null && xcopy || xsel -i -b" # xsel -i -p && xsel -o -p | xsel -i -b

## Press up/down keys ==> scroll
bind -T copy-mode-vi Up   send-keys -X scroll-up
bind -T copy-mode-vi Down send-keys -X scroll-down

## Scroll multiple lines with mouse at once
# Without this, scrolling is too slow.
bind -T copy-mode-vi WheelUpPane   send-keys -t= -N 4 Up
# When scrolled up less than 4 lines and run 'send-keys -N 4 Down', an error ("Not in a mode") occurs.
# So we need to explicitly quit copy mode in this case (using if-shell)
bind -T copy-mode-vi WheelDownPane if-shell -t= 'test #{scroll_position} -lt 4' 'copy-mode -q' 'send-keys -t= -N 4 Down'
# When not in copy mode and WheelUp event happens, it doesn't scroll up by default (just enters the mode)
# So we make it scroll up in this case.
# But in ranger,emacs etc. (can be detected by mouse_any_flag), WheelUp should not trigger copy-mode, rather send raw mouse event with send-keys -M.
bind -n WheelUpPane if-shell -Ft= "#{mouse_any_flag}" 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -N 4 Up'

# Old ones (this one doesn't work well (after Dec.2020?), it seems to set left mouse button always pressed, on WheelUp event.)
# bind -n WheelUpPane if-shell -Ft= "#{mouse_any_flag}" "send-keys -M" \
#   "if-shell -Ft= '#{pane_in_mode}' 'send-keys H; send-keys 4 Up' 'select-pane -t =; copy-mode -e'"
# bind -n WheelDownPane if-shell -Ft= "#{mouse_any_flag}" "send-keys -M" \
#   "if-shell -Ft= \"#{pane_in_mode}\" \"if-shell -t= 'test #{scroll_position} -eq 0 -a #{cursor_y} -ge $(expr #{pane_height} - 1)' 'send-keys q' 'send-keys L; send-keys 4 Down'\""

## (No copy mode) Mouse right click ==> paste
bind -n mousedown3pane run "{ command -v xpaste >/dev/null && xpaste || xsel -o; } | tmux load-buffer - ; tmux paste-buffer"
# ???????
bind -n mousedrag3pane if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -m\" \"send-keys -m\"" "copy-mode -m"

## (No copy mode) Press p key ==> paste
bind p run "{ command -v xpaste >/dev/null && xpaste || xsel -o; } | tmux load-buffer - ; tmux paste-buffer"

# }}}
## Lock {{{
bind    L     lock-client
set -g lock-after-time 0
set -g lock-command asciiquarium

## }}}
## Pane Skip {{{
setenv -g TMUXSKIP ""
bind    m     run-shell 'id=$(tmux display -p "##{pane_id}"); val=$(tmux showenv TMUXSKIP | sed "s/.*=//"); if echo "$val" | grep "$id" >/dev/null; then newval=$(echo "$val" | sed "s/ *$id//g"); msg="Cleared skip of this pane"; else newval="$val $id"; msg="Will skip this pane"; fi; tmux setenv TMUXSKIP "$newval"; tmux display "$msg"'
bind    M     run-shell 'tmux setenv TMUXSKIP ""; tmux display "Cleared skips of all panes"'
bind -n M-1   run-shell 'for i in 1 2 3 4 5 6 7 8; do id=$(tmux display -t :.+$i -pF "##{pane_id}"); if ! tmux showenv TMUXSKIP | grep "$id" >/dev/null; then tmux select-pane -t :.+$i; break; fi; done;'

# }}}
## tmuxcd {{{
bind C run-shell 'd=$(tmux last-pane \; display -p "##{pane_current_path}" \; last-pane || true); tmux send-keys -l "cd '"'"'$d'"'"'" \; send-keys ENTER' # you can think of '"'"' as '
bind f run-shell 'd=$(tmux last-pane \; display -p "##{pane_current_path}" \; last-pane || true); tmux send-keys -l "cd '"'"'$d'"'"'" \; send-keys ENTER' # you can think of '"'"' as '

# Save current pane's path to TMUX_LAST_PATH_NEW, and previous one to TMUX_LAST_PATH
# Use case: tmuxcd() { cd "$(tmux display -p '#{TMUX_LAST_PATH}'"); }
# set-hook -g pane-focus-in 'setenv -F TMUX_LAST_PATH "#{TMUX_LAST_PATH_NEW}" ; setenv -F TMUX_LAST_PATH_NEW "#{pane_current_path}"'
# bind p run-shell 'zenity --info --text "#{TMUX_LAST_PATH}   #{TMUX_LAST_PATH_NEW}" || true'

# }}}

## colemakdh {{{
if 'test $MYKBD = colemakdh' {

    bind -r k     resize-pane -L 1
    bind -r n     resize-pane -D 1
    bind -r e     resize-pane -U 1
    bind -r i     resize-pane -R 1

    bind -T copy-mode-vi k send-keys -X cursor-left
    bind -T copy-mode-vi n send-keys -X cursor-down
    bind -T copy-mode-vi e send-keys -X cursor-up
    bind -T copy-mode-vi i send-keys -X cursor-right

    bind -T copy-mode-vi j send-keys -X search-again
    bind -T copy-mode-vi J send-keys -X search-reverse
    bind -T copy-mode-vi h send-keys -X next-word-end
    bind -T copy-mode-vi H send-keys -X next-space-end

}

## }}}

## Load local configuration {{{
if-shell "test -f $MY_TMUX_CONF_LOCAL" "source-file $MY_TMUX_CONF_LOCAL" ""
## }}}
## Notes about local configuration file {{{

# To set secondary prefix key:
#   MY_TMUX_PREFIX2=key
#   unbind $MY_TMUX_PREFIX2
#   set -g prefix2 $MY_TMUX_PREFIX2
#   bind $MY_TMUX_PREFIX2 send-prefix -2

# To change shell:
#   MY_TMUX_SHELL=/path/to/shell
#   set -g default-shell "$MY_TMUX_SHELL"
#   set -g default-command "$MY_TMUX_SHELL"

# }}}

## Notes about tmux {{{

# Session : can be attached and dettached
# Window  : look like tabs
# Pane    : part of window

# 'bind' is an alias for bind-key

# pane-border-fg etc. is replaced by the similar vars like pane-border-style

# how about using send-keys to input ->

# }}}
